{"ast":null,"code":"import API_BASE_URL from '../config/api';\nconst createBlog = async blog => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs`, {\n    method: \"POST\",\n    headers: {\n      // \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: blog\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogs = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogByID = async id => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/` + id, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogsByCategoryId = async categoryId => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/categories/` + categoryId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogsByAuthorId = async authorId => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/author/` + authorId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst updateBlog = async blog => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/` + blog.get('id'), {\n    method: \"PUT\",\n    headers: {\n      // \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: blog\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst deleteBlog = async id => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/` + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogByID,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlog\n};\nexport default blogService;","map":{"version":3,"names":["API_BASE_URL","createBlog","blog","response","fetch","method","headers","Authorization","JSON","parse","localStorage","getItem","token","body","ok","res","json","message","stringify","err","error","Error","blogsApiData","fetchBlogs","console","log","fetchBlogByID","id","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlog","get","deleteBlog","blogService"],"sources":["/Users/student/iXperience/frontend/src/services/blogService.js"],"sourcesContent":["import API_BASE_URL from '../config/api';\n\nconst createBlog = async (blog) => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs`, {\n    method: \"POST\",\n    headers: {\n      // \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n    body: blog,\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      \n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogs = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogByID = async (id) => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/` + id, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogsByCategoryId = async (categoryId) => {\n  const response = await fetch(\n    `${API_BASE_URL}/api/blogs/categories/` + categoryId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogsByAuthorId = async (authorId) => {\n  const response = await fetch(\n    `${API_BASE_URL}/api/blogs/author/` + authorId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst updateBlog = async (blog) => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/` + blog.get('id'), {\n    method: \"PUT\",\n    headers: {\n      // \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n    body: blog,\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst deleteBlog = async (id) => {\n  const response = await fetch(`${API_BASE_URL}/api/blogs/` + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogByID,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlog,\n};\n\nexport default blogService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}